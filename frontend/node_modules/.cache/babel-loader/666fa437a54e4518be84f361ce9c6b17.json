{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n    this._token = options._token;\n  }\n\n  _getResponseData(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(new Error(`Ошибка: ${res.status}`)).then(result => {\n      return result;\n    });\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(this._getResponseData);\n  }\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._getResponseData);\n  }\n\n  postCard(newCard) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: newCard.name,\n        link: newCard.link\n      })\n    }).then(this._getResponseData);\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._getResponseData);\n  }\n\n  patchUserInfo(newData) {\n    return fetch(`${this._baseUrl}/users/me/`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: newData.name,\n        about: newData.about\n      })\n    }).then(this._getResponseData);\n  }\n\n  patchAvatar(newData) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: newData.avatar\n      })\n    }).then(this._getResponseData);\n  }\n\n  putLike(id) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(this._getResponseData);\n  }\n\n  removeLike(id) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._getResponseData);\n  }\n\n  register(email, password) {\n    return fetch(`${this._baseUrl}/signup`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(this._getResponseData);\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: 'http://localhost:3008',\n  headers: {\n    \"Authorization\": `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"sources":["/home/dmitrij/dev/react-mesto-auth/src/utils/Api.js"],"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","_token","_getResponseData","res","ok","json","Promise","reject","Error","status","then","result","getInitialCards","fetch","getUserInfo","postCard","newCard","method","body","JSON","stringify","name","link","deleteCard","id","patchUserInfo","newData","about","patchAvatar","avatar","putLike","removeLike","register","email","password","api","token"],"mappings":"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","sourcesContent":["class Api {\n\tconstructor(options) {\n\t\tthis._baseUrl = options.baseUrl;\n\t\tthis._headers = options.headers;\n\t\tthis._token = options._token;\n\t}\n\n\t_getResponseData(res) {\n\t\tif (res.ok) {\n\t\t\treturn res.json();\n\t\t}\n\t\treturn Promise.reject(new Error(`Ошибка: ${res.status}`))\n\t\t\t.then((result) => {\n\t\t\t\treturn result\n\t\t\t})\n\t}\n\n\tgetInitialCards() {\n\t\treturn fetch(`${this._baseUrl}/cards`, {\n\t\t\theaders: this._headers\n\t\t}).then(this._getResponseData)\n\t}\n\n\tgetUserInfo() {\n\t\treturn fetch(`${this._baseUrl}/users/me`, {\n\t\t\theaders: this._headers\n\t\t})\n\t\t.then(this._getResponseData)\n\t}\n\n\tpostCard(newCard) {\n\t\treturn fetch(`${this._baseUrl}/cards`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: this._headers,\n\t\t\tbody: JSON.stringify({\n\t\t\t\tname: newCard.name,\n\t\t\t\tlink: newCard.link\n\t\t\t})\n\t\t}).then(this._getResponseData)\n\t}\n\n\tdeleteCard(id) {\n\t\treturn fetch(`${this._baseUrl}/cards/${id}`, {\n\t\t\tmethod: 'DELETE',\n\t\t\theaders: this._headers\n\t\t}).then(this._getResponseData)\n\t}\n\n\tpatchUserInfo(newData) {\n\t\treturn fetch(`${this._baseUrl}/users/me/`, {\n\t\t\tmethod: 'PATCH',\n\t\t\theaders: this._headers,\n\t\t\tbody: JSON.stringify({\n\t\t\t\tname: newData.name,\n\t\t\t\tabout: newData.about\n\t\t\t})\n\t\t}).then(this._getResponseData)\n\t}\n\n\tpatchAvatar(newData) {\n\t\treturn fetch(`${this._baseUrl}/users/me/avatar`, {\n\t\t\tmethod: 'PATCH',\n\t\t\theaders: this._headers,\n\t\t\tbody: JSON.stringify({\n\t\t\t\tavatar: newData.avatar\n\t\t\t})\n\t\t}).then(this._getResponseData)\n\t}\n\n\tputLike(id) {\n\t\treturn fetch(`${this._baseUrl}/cards/likes/${id}`, {\n\t\t\tmethod: 'PUT',\n\t\t\theaders: this._headers\n\t\t})\n\t\t\t.then(this._getResponseData)\n\t}\n\n\tremoveLike(id) {\n\t\treturn fetch(`${this._baseUrl}/cards/likes/${id}`, {\n\t\t\tmethod: 'DELETE',\n\t\t\theaders: this._headers\n\t\t})\n\t\t\t.then(this._getResponseData)\n\t}\n\n\tregister(email, password) {\n\t\treturn fetch(`${this._baseUrl}/signup`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\"\n\t\t\t},\n\t\t\tbody: JSON.stringify({ \n\t\t\t\temail, password})\n\t\t})\n\t\t\t.then(this._getResponseData)\n\t}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\nconst api = new Api({\n\tbaseUrl: 'http://localhost:3008',\n\theaders: {\n\t\t\"Authorization\": `Bearer ${token}`,\n\t\t'Content-Type': 'application/json'\n\t}\n});\n\nexport default api\n"]},"metadata":{},"sourceType":"module"}